/**
 * 
 */
package graphs;



/**
 * @author Lau Sandt
 * https://github.com/lausandt/Graphs
 */
public interface Graph<V, E> {

	/** returns the number of vertices of the graph */
	int numVertices();
	
	/** returns an iteration of all vertices of the graph */
	Iterable<Vertex<V>> vertices();
	
	/** returns the number of edges of the graph */
	int numEdges();
	
	/** returns an iteration of all edges of the graph */
	Iterable<Edge<E>> edges();
	
	/** 
	 * returns the edge from vertex u and vertex v, if one exists, otherwise null. 
     *   For an undirected graph there no difference between getEdge(u,v) and getEdge(v,u)
     */
	Edge<E> getEdge(Vertex<V> u, Vertex<V> v);
	
	/**
	 * returns an array of the two endpoint vertices of edge e. If the graph is directed,
     * the first is the origin and the second the destination
	 */
	Vertex<V>[] endVertices(Edge<E> e);
	
	/** Returns the other vertex of e. An error occurs of v is not a vertex of e */
	Vertex<V> opposite(Vertex<V> v,Edge<E> e) throws IllegalArgumentException;
	
    /** Returns the number of outgoing edges from vertex v */
	int outDegree(Vertex<V> v);
	
	/** Returns the number of ingoing edges to vertex v. For an undirected graph this is the same value as outDegree(v) */
	int inDegree(Vertex<V> v);
	
	/** Returns an iteration of all outgoing edges of v */
	Iterable<Edge<E>> outgoingEdges(Vertex<V> v);
	
	/** Returns an iteration of all incoming edges of v */
	Iterable<Edge<E>> incomingEdges(Vertex<V> v);
	
	/** creates and returns an new vertex storing element x */
	Vertex<V> insertVertex(V element);
	
	/** creates and returns an edge from vertex u to v storing element x an error occurs if such an edge exists*/
	Edge<E> insertEdge(Vertex<V> u, Vertex<V> v, E element) throws IllegalArgumentException;
	
	/** removes vertex v and all the incident edges from the graph */
	void removeVertex(Vertex<V> v) throws IllegalArgumentException;
	
	/** removes an edge from the graph */
	void removeEdge(Edge<E> e) throws IllegalArgumentException;
	
	
}
